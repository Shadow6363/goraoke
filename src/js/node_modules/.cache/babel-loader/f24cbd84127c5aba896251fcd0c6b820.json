{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { IS_SEARCHING, SEARCH_RESULTS_RECEIVED, PLAYLIST_RECEIVED, PLAYLIST_IS_FETCHING, PLAYLIST_SONG_ADDED, PLAYLIST_UPDATED, PLAYLIST_CLEARED, PLAYLIST_SONG_REMOVED } from '../constants/reducer-actions.const';\nimport { compose } from 'redux'; // set json content type headers\n\nexport var requestOptions = function requestOptions(options) {\n  return Object.assign({}, options, {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  });\n}; // handle results of a generic response and dispatch\n\nfunction handleGenericResponse(dispatch, response, func) {\n  if (response.ok) {\n    response.json().then(function (body) {\n      dispatch(func(body));\n    });\n  } else {\n    dispatch(errorOccurred(response));\n  }\n}\n\nfunction errorOccurred(response) {}\n\nfunction isFetching() {\n  return {\n    type: PLAYLIST_IS_FETCHING\n  };\n}\n\nfunction isSearching() {\n  return {\n    type: IS_SEARCHING\n  };\n}\n\nfunction searchResultsReceived(response) {\n  return Object.assign({}, {\n    type: SEARCH_RESULTS_RECEIVED,\n    response: response\n  });\n} // post api/search\n\n\nexport function search(term) {\n  return function (dispatch) {\n    dispatch(isSearching());\n    fetch('api/playlist/song', requestOptions({\n      method: 'POST',\n      body: JSON.stringify({\n        term: term\n      })\n    })).then(function (response) {\n      handleGenericResponse(dispatch, response, searchResultsReceived);\n    });\n  };\n}\n\nfunction playlistReceived(response) {\n  return Object.assign({}, {\n    type: PLAYLIST_RECEIVED\n  }, {\n    playlistSongs: response\n  });\n} // get api/playlist\n\n\nexport function getPlaylist() {\n  return function (dispatch) {\n    dispatch(isFetching());\n    fetch('/api/playlist').then(function (res) {\n      return res.json();\n    }).then(function (response) {\n      console.log;\n      handleGenericResponse(dispatch, response, playlistReceived);\n    });\n  };\n}\n\nfunction songAdded(response) {\n  return Object.assign({}, {\n    type: PLAYLIST_SONG_ADDED\n  });\n} // put api/playlist/song\n\n\nexport function addPlaylistSong(songId) {\n  return function (dispatch) {\n    fetch('api/playlist/song', requestOptions({\n      method: 'PUT',\n      body: JSON.stringify({\n        song_id: songId\n      })\n    })).then(function (response) {\n      handleGenericResponse(dispatch, response, songAdded);\n    });\n  };\n}\n\nfunction playlistSongRemoved(response) {\n  return Object.assign({}, {\n    type: PLAYLIST_SONG_REMOVED\n  }, response);\n} // delete api/playlist/song\n// playlist_song_id\": 1 \n\n\nexport function removePlaylistSong(playlistSongId) {\n  return function (dispatch) {\n    fetch('api/playlist/song', requestOptions({\n      method: 'DELETE',\n      body: JSON.stringify({\n        playlist_song_id: playlistSongId\n      })\n    })).then(function (response) {\n      handleGenericResponse(dispatch, response, playlistSongRemoved);\n    });\n  };\n}\n\nfunction playlistReset(response) {\n  return Object.assign({}, {\n    type: PLAYLIST_CLEARED\n  }, response);\n} // delete api/playlist/reset\n\n\nexport function resetPlaylist() {\n  return function (dispatch) {\n    fetch('api/playlist/reset', requestOptions({\n      method: 'DELETE'\n    })).then(function (response) {\n      handleGenericResponse(dispatch, response, playlistReset);\n    });\n  };\n}\n\nfunction playlistOrderChanged(response) {\n  return Object.assign({}, {\n    type: PLAYLIST_UPDATED\n  }, response);\n} // post api/playlist/change_order\n// playlist_song_id\": 6, \"sort_order\": 3 \n\n\nexport function playlistChangeOrder(playlistSongId, sortOrder) {\n  return function (dispatch) {\n    fetch('api/playlist/reset', requestOptions({\n      method: 'POST',\n      body: JSON.stringify({\n        playlist_song_id: playlistSongId,\n        sortOrder: sortOrder\n      })\n    })).then(function (response) {\n      handleGenericResponse(dispatch, response, playlistOrderChanged);\n    });\n  };\n}","map":{"version":3,"sources":["/Users/jonathanphillips/go/src/github.com/elguapo1611/karaoke/src/js/src/actions/playlist.action.js"],"names":["fetch","IS_SEARCHING","SEARCH_RESULTS_RECEIVED","PLAYLIST_RECEIVED","PLAYLIST_IS_FETCHING","PLAYLIST_SONG_ADDED","PLAYLIST_UPDATED","PLAYLIST_CLEARED","PLAYLIST_SONG_REMOVED","compose","requestOptions","options","Object","assign","headers","credentials","handleGenericResponse","dispatch","response","func","ok","json","then","body","errorOccurred","isFetching","type","isSearching","searchResultsReceived","search","term","method","JSON","stringify","playlistReceived","playlistSongs","getPlaylist","res","console","log","songAdded","addPlaylistSong","songId","song_id","playlistSongRemoved","removePlaylistSong","playlistSongId","playlist_song_id","playlistReset","resetPlaylist","playlistOrderChanged","playlistChangeOrder","sortOrder"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport {\n  IS_SEARCHING,\n  SEARCH_RESULTS_RECEIVED,\n  PLAYLIST_RECEIVED,\n  PLAYLIST_IS_FETCHING,\n  PLAYLIST_SONG_ADDED,\n  PLAYLIST_UPDATED,\n  PLAYLIST_CLEARED,\n  PLAYLIST_SONG_REMOVED\n} from '../constants/reducer-actions.const';\nimport { compose } from 'redux';\n\n// set json content type headers\nexport const requestOptions = function(options) {\n  return Object.assign({}, options, {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    credentials: 'same-origin'\n  });\n};\n\n// handle results of a generic response and dispatch\nfunction handleGenericResponse(dispatch, response, func) {\n  if (response.ok) {\n    response.json().then(function(body) {\n      dispatch(func(body));\n    });\n  } else {\n    dispatch(errorOccurred(response));\n  }\n}\n\nfunction errorOccurred(response) {\n\n}\n\nfunction isFetching() {\n  return {type: PLAYLIST_IS_FETCHING};\n}\n\nfunction isSearching() {\n  return {type: IS_SEARCHING}\n}\n\nfunction searchResultsReceived(response) {\n  return Object.assign({}, {\n    type: SEARCH_RESULTS_RECEIVED,\n    response: response\n  })\n}\n\n// post api/search\nexport function search(term) {\n  return (dispatch) => {\n    dispatch(isSearching());\n    fetch('api/playlist/song',\n      requestOptions({\n        method: 'POST',\n        body: JSON.stringify({\n          term: term\n        })\n      }))\n      .then( function(response) {\n        handleGenericResponse(dispatch, response, searchResultsReceived);\n      });\n  }\n}\n\n\nfunction playlistReceived(response) {\n  return Object.assign({}, {\n    type: PLAYLIST_RECEIVED\n  }, {playlistSongs: response});\n}\n\n// get api/playlist\nexport function getPlaylist() {\n  return (dispatch) => {\n    dispatch(isFetching());\n    fetch('/api/playlist')\n      .then(res => res.json())\n      .then( function(response) {\n        console.log\n        handleGenericResponse(dispatch, response, playlistReceived);\n      });\n  };\n}\n\nfunction songAdded(response) {\n  return Object.assign({}, {\n    type: PLAYLIST_SONG_ADDED\n  })\n}\n// put api/playlist/song\nexport function addPlaylistSong(songId) {\n  return (dispatch) => {\n    fetch('api/playlist/song',\n      requestOptions({\n        method: 'PUT',\n        body: JSON.stringify({\n          song_id: songId\n        })\n      }))\n      .then( function(response) {\n        handleGenericResponse(dispatch, response, songAdded);\n      });\n  }\n}\n\nfunction playlistSongRemoved(response) {\n  return Object.assign({}, {\n    type: PLAYLIST_SONG_REMOVED\n  }, response )\n}\n// delete api/playlist/song\n// playlist_song_id\": 1 \nexport function removePlaylistSong(playlistSongId) {\n  return (dispatch) => {\n    fetch('api/playlist/song',\n      requestOptions({\n        method: 'DELETE',\n        body: JSON.stringify({\n          playlist_song_id: playlistSongId\n        })\n      }))\n      .then( function(response) {\n        handleGenericResponse(dispatch, response, playlistSongRemoved);\n      });\n  }\n}\n\nfunction playlistReset(response) {\n  return Object.assign({}, {\n    type: PLAYLIST_CLEARED\n  }, response)\n}\n\n// delete api/playlist/reset\nexport function resetPlaylist() {\n  return (dispatch) => {\n    fetch('api/playlist/reset',\n      requestOptions({\n        method: 'DELETE'\n      }))\n      .then( function(response) {\n        handleGenericResponse(dispatch, response, playlistReset);\n      });\n  }\n}\n\nfunction playlistOrderChanged(response) {\n  return Object.assign({}, {\n    type: PLAYLIST_UPDATED\n  }, response)\n}\n\n// post api/playlist/change_order\n// playlist_song_id\": 6, \"sort_order\": 3 \nexport function playlistChangeOrder(playlistSongId, sortOrder) {\n  return (dispatch) => {\n    fetch('api/playlist/reset',\n      requestOptions({\n        method: 'POST',\n        body: JSON.stringify({\n          playlist_song_id: playlistSongId,\n          sortOrder: sortOrder\n        })\n      }))\n      .then( function(response) {\n        handleGenericResponse(dispatch, response, playlistOrderChanged);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}